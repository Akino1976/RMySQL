% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/MySQL.R
\docType{package}
\name{RMySQL-package}
\alias{RMySQL}
\alias{RMySQL-package}
\title{R interface to the MySQL database}
\description{
The functions in this package allow you interact with one or more MySQL
databases from R.
}
\section{Overview}{
 A typical usage of the R-MySQL interface is: \enumerate{
\item Connect and authenticate to one or more MySQL databases:
\preformatted{ con <- dbConnect(MySQL(), group = "lasers") con2 <-
dbConnect(MySQL(), user="opto", password="pure-light", dbname="lasers",
host="merced") } \item List tables and fields in a table: \preformatted{
dbListTables(con) dbListFields(con, "table\_name") } \item Import and export
data.frames: \preformatted{ d <- dbReadTable(con, "WL") dbWriteTable(con,
"WL2", a.data.frame) ## table from a data.frame dbWriteTable(con, "test2",
"~/data/test2.csv") ## table from a file } \item Run an arbitrary SQL
statement and extract all its output (returns a data.frame): \preformatted{
dbGetQuery(con, "select count(*) from a\_table") dbGetQuery(con, "select *
from a\_table") } \item Run an SQL statement and extract its output in
pieces (returns a result set): \preformatted{ rs <- dbSendQuery(con, "select
* from WL where width\_nm between 0.5 and 1") d1 <- fetch(rs, n = 10000) d2
<- fetch(rs, n = -1 } \item Run multiple SQL statements and process the
various result sets (note the \code{client.flag} value in the
\code{dbConnect} call): \preformatted{ con <- dbConnection(MySQL(), dbname =
"rs-dbi", client.flag = CLIENT\_MULTI\_STATEMENTS) script <- paste("select *
from WL where width\_nm between 0.5 and 1" "select * from lasers\_id where
id LIKE 'AL100%' sep = ";") rs1 <- dbSendQuery(con, script) d1 <- fetch(rs1,
n = -1) if(dbMoreResults(con)){ rs2 <- dbNextResult(con) d2 <- fetch(rs2,
n=-1) } } \item Get meta-information on a connection (thread-id, etc.):
\preformatted{ summary(MySQL(), verbose = TRUE) summary(con, verbose = TRUE)
summary(rs, verbose = TRUE) dbListConnections(MySQL()) dbListResultSets(con)
dbHasCompleted(rs) } \item Close connections: \preformatted{
dbDisconnect(con) dbDisconnect(con2) } }
}
\examples{
\dontrun{
# create a MySQL instance and create one connection.
> m <- dbDriver("MySQL")  ## or MySQL()
<MySQLDriver:(4378)>

# open the connection using user, passsword, etc., as
# specified in the "[iptraffic]" section of the
# configuration file \\file{\\$HOME/.my.cnf}
> con <- dbConnect(m, group = "iptraffic")
> rs <- dbSendQuery(con, "select * from HTTP_ACCESS where IP_ADDRESS = '127.0.0.1'")
> df <- fetch(rs, n = 50)
> dbHasCompleted(rs)
[1] FALSE
> df2 <- fetch(rs, n = -1)
> dbHasCompleted(rs)
[1] TRUE
> dbClearResult(rs)
> dim(dbGetQuery(con, "show tables"))
[1] 74   1
> dbListTables(con)
}
}
\author{
David A. James <dj@bell-labs.com> Saikat DebRoy
<saikat@stat.wisc.edu>
}
\seealso{
On database managers:

\code{\link[DBI]{dbDriver}} \code{\link[DBI]{dbUnloadDriver}}

On connections, SQL statements and resultSets:

\code{\link[DBI]{dbConnect}} \code{\link[DBI]{dbDisconnect}}
\code{\link[DBI]{dbSendQuery}} \code{\link[DBI]{dbGetQuery}}
\code{\link[DBI]{fetch}} \code{\link[DBI]{dbClearResult}}

On transaction management:

\code{\link[DBI]{dbCommit}} \code{\link[DBI]{dbRollback}}

On meta-data:

\code{\link{summary}} \code{\link[DBI]{dbGetInfo}}
\code{\link[DBI]{dbGetDBIVersion}} \code{\link[DBI]{dbListTables}}
\code{\link[DBI]{dbListConnections}} \code{\link[DBI]{dbListResults}}
\code{\link[DBI]{dbColumnInfo}} \code{\link[DBI]{dbGetException}}
\code{\link[DBI]{dbGetStatement}} \code{\link[DBI]{dbHasCompleted}}
\code{\link[DBI]{dbGetRowCount}}
}
\keyword{database}
\keyword{interface}
\keyword{package}

